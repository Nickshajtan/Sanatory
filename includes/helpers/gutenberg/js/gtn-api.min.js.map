{"version":3,"sources":["gtn-api.min.js"],"names":["el","wp","element","createElement","registerBlockType","blocks","withSelect","data","title","icon","category","attributes","content","type","color","edit","props","React","value","onChange","event","setAttributes","target","components","ColorPicker","onChangeComplete","hex","save","style","border","serverSideRender","meta","source","select","selectCore","postTypeSlug","getEditedPostAttribute","postType","getPostType","query","hierarchical","per_page","order","status","posts","getEntityRecords","html","className","length","post","i","key","rendered","link","finalData","window","e","console","log"],"mappings":"AAIA,IACE,IAAIA,GAAgBC,GAAGC,QAAQC,cAC/BC,kBAAoBH,GAAGI,OAAOD,kBAC9BE,WAAoBL,GAAGM,KAAKD,WAG5BF,kBAAkB,YAAa,CACzBI,MAAO,aACPC,KAAM,SACNC,SAAU,aACVC,WAAY,CACRC,QAAS,CAACC,KAAM,UAChBC,MAAO,CAACD,KAAM,WAElBE,KAAM,SAASC,GAOX,OAAOC,MAAMd,cACT,MACA,KACAc,MAAMd,cACF,KACA,KACA,cAEJc,MAAMd,cAAc,QAAS,CAAEU,KAAM,OAAQK,MAAOF,EAAML,WAAWC,QAASO,SAdlF,SAAuBC,GACnBJ,EAAMK,cAAc,CAACT,QAASQ,EAAME,OAAOJ,WAc3CD,MAAMd,cAAcF,GAAGsB,WAAWC,YAAa,CAAEV,MAAOE,EAAML,WAAWG,MAAOW,iBAZpF,SAAqBP,GACjBF,EAAMK,cAAc,CAACP,MAAOI,EAAMQ,WAc1CC,KAAM,SAASX,GACX,OAAOf,GAAGC,QAAQC,cACd,KACA,CAAEyB,MAAO,CAAEC,OAAQ,aAAeb,EAAML,WAAWG,QACnDE,EAAML,WAAWC,YAK3B,SAAUP,EAAQH,EAAS4B,GACzB,IAAI9B,EAAKE,EAAQC,eAIjBC,EAHoBC,EAAOD,mBAGR,eAAgB,CAC/BI,MAAO,YACPC,KAAM,YACNC,SAAU,aACVC,WAAY,CACRH,MAAO,CACHK,KAAM,SACNkB,KAAM,aACNC,OAAQ,SAIhBjB,KAAMT,YAAY,SAAU2B,GACxB,IAAIC,EAAeD,EAAQ,QAGvBE,EAFeF,EAAQ,eAEOG,uBAAwB,QAEtDC,EAAiBH,EAAWI,YAAaH,GAEzCI,GADiBF,GAAYA,EAASG,aAC9B,CACRC,SAAU,EACVC,MAAQ,OACRC,OAAQ,YAERnC,EAAQQ,MAAML,WAAWH,MAI7B,MAAO,CACHoC,MACIV,EAAWW,iBAAkB,WAAYV,EAAcI,GAC3DO,KAAM9C,EACF,IACA,CAAE+C,UAAWA,WACb/C,EACI,WACA,CAAEkB,MAAOV,EAAOW,SAX5B,SAAsBC,GAClBJ,MAAMK,cAAe,CAAEb,MAAOY,EAAME,OAAOJ,eAf7CZ,EA6BD,SAAUU,GACX,IAAOA,EAAM4B,MACT,MAAO,aAEX,GAAK5B,EAAM4B,OAAgC,IAAvB5B,EAAM4B,MAAMI,OAC5B,MAAO,kBAEX,IAAID,EAAY/B,EAAM+B,UAClBE,EAAYjC,EAAM4B,MAClBrC,EAAY,GAEZ2C,EAAI,EACR,IAAM,IAAIC,KAAOF,EAAM,CACnB,IAAIzC,EAAQyC,EAAMC,GAAI1C,MAAM4C,SACxBC,EAAQ,YAAcJ,EAAMC,GAAIG,KAAO,YAAcN,EAAY,KAAQvC,EAAQ,aACrFD,EAAM2C,GAAM,CAAEG,KAAMA,GACpBH,GAAM,EAGV,IAAII,EAAY,GACZJ,EAAI,EACR,IAAM,IAAIC,KAAO5C,EACb+C,GAAwB/C,EAAM2C,GAAU,KACxCA,GAAM,EAIV,OAAOlD,EACK,MACA,CAAE+C,UAAWA,EAAY,SACzBO,MAYhB3B,KAAM,WAEF,OAAO,QA1FnB,CA8FI4B,OAAOtD,GAAGI,OACVkD,OAAOtD,GAAGC,QACVqD,OAAOtD,GAAGM,MAGlB,MAAMiD,GACFC,QAAQC,IAAI","file":"gtn-api.min.js","sourcesContent":["/* \r\nfor more info see: \r\n\thttps://developer.wordpress.org/block-editor/developers/filters/block-filters \r\n*/\r\ntry{\r\n  var el            = wp.element.createElement,\r\n  registerBlockType = wp.blocks.registerBlockType,\r\n  withSelect        = wp.data.withSelect;\r\n  \r\n  //Static block : Example\r\n  registerBlockType('hcc/smile', {\r\n        title: 'Simple Box',\r\n        icon: 'smiley',\r\n        category: 'hcc-blocks',\r\n        attributes: {\r\n            content: {type: 'string'},\r\n            color: {type: 'string'}\r\n        },\r\n        edit: function(props) {\r\n            function updateContent(event) {\r\n                props.setAttributes({content: event.target.value})\r\n            }\r\n            function updateColor(value) {\r\n                props.setAttributes({color: value.hex})\r\n            }\r\n            return React.createElement(\r\n                \"div\",\r\n                null,\r\n                React.createElement(\r\n                    \"h3\",\r\n                    null,\r\n                    \"Simple Box\"\r\n                ),\r\n                React.createElement(\"input\", { type: \"text\", value: props.attributes.content, onChange: updateContent }),\r\n                React.createElement(wp.components.ColorPicker, { color: props.attributes.color, onChangeComplete: updateColor })\r\n            );\r\n        },\r\n        save: function(props) {\r\n            return wp.element.createElement(\r\n                \"h3\",\r\n                { style: { border: \"3px solid \" + props.attributes.color } },\r\n                props.attributes.content\r\n            );\r\n        }\r\n    });\r\n    //Dynamic block: Example\r\n    ( function( blocks, element, serverSideRender ) {\r\n        var el = element.createElement,\r\n        registerBlockType = blocks.registerBlockType,\r\n        ServerSideRender = serverSideRender;\r\n        \r\n        registerBlockType( 'hcc/get-post', {\r\n            title: 'Get Posts',\r\n            icon: 'megaphone',\r\n            category: 'hcc-blocks',\r\n            attributes: {\r\n                title: {\r\n                    type: 'string',\r\n                    meta: 'book-title',\r\n                    source: 'meta'\r\n                },\r\n            },\r\n\r\n            edit: withSelect( function( select ) {\r\n                var selectCore   = select( 'core' );\r\n                var selectEditor = select( 'core/editor' );\r\n\r\n                var postTypeSlug   = selectEditor.getEditedPostAttribute( 'type' );\r\n                //console.log( postTypeSlug );\r\n                var postType       = selectCore.getPostType( postTypeSlug );\r\n                var isHierarchical = postType && postType.hierarchical;\r\n                var query = {\r\n                    per_page: 3,\r\n                    order:  'desc',\r\n                    status: 'publish',\r\n                };\r\n                var title = props.attributes.title;\r\n                function updateTitle( event ) {\r\n                    props.setAttributes( { title: event.target.value } );\r\n                }\r\n                return {\r\n                    posts: isHierarchical ?\r\n                        selectCore.getEntityRecords( 'postType', postTypeSlug, query ) : selectCore.getEntityRecords( 'postType', postTypeSlug, query ),\r\n                    html: el(\r\n                        'p', \r\n                        { className: className },\r\n                        el(\r\n                            'textarea',\r\n                            { value: title, onChange: updateTitle }\r\n                        ) \r\n                    ),\r\n                };\r\n            } )( function( props ) {\r\n                if ( ! props.posts ) {\r\n                    return 'Loading...';\r\n                }\r\n                if ( props.posts && props.posts.length === 0 ) {\r\n                    return 'Error: no posts';\r\n                }\r\n                var className = props.className;\r\n                var post      = props.posts;\r\n                var data      = {};\r\n                \r\n                var i = 0;\r\n                for ( var key in post ){\r\n                    let title = post[ i ].title.rendered;\r\n                    let link  = '<a href=\"' + post[ i ].link + '\" class=\"' + className + '\">' +  title + '</a><br />';\r\n                    data[ i ] = { link: link };\r\n                    i = i+1;\r\n                }\r\n                \r\n                var finalData = '';\r\n                var i = 0;\r\n                for ( var key in data ){\r\n                    finalData = finalData + data[ i ]['link'];\r\n                    i = i+1;\r\n                }\r\n                \r\n                \r\n                return el(\r\n                            'div',\r\n                            { className: className + '-wrap'},\r\n                            finalData\r\n                );\r\n                \r\n                //Server render \r\n                /*\r\n                return el( ServerSideRender, {\r\n                        block: 'hcc/get-post',\r\n                        attributes: props.attributes,\r\n                });\r\n                */\r\n            }),\r\n\r\n            save: function() {\r\n                // Rendering in PHP\r\n                return null;\r\n            },\r\n        });\r\n    }(\r\n        window.wp.blocks,\r\n        window.wp.element,\r\n        window.wp.data,\r\n    ));\r\n}\r\ncatch(e){\r\n    console.log('Problem with gtn-api.js Gutenberg registration script');\r\n}"]}